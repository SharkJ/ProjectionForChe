/*
 * generated by Xtext 2.15.0
 */
package org.xtext.projection.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.projection.ide.contentassist.antlr.internal.InternalProjectionParser;
import org.xtext.projection.services.ProjectionGrammarAccess;

public class ProjectionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ProjectionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ProjectionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getTerminalAccess().getAlternatives(), "rule__Terminal__Alternatives");
			builder.put(grammarAccess.getMyTextAccess().getGroup(), "rule__MyText__Group__0");
			builder.put(grammarAccess.getMyIntAccess().getGroup(), "rule__MyInt__Group__0");
			builder.put(grammarAccess.getMyDecimalAccess().getGroup(), "rule__MyDecimal__Group__0");
			builder.put(grammarAccess.getMyIdAccess().getGroup(), "rule__MyId__Group__0");
			builder.put(grammarAccess.getMyTimeAccess().getGroup(), "rule__MyTime__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getMyTextAccess().getNameAssignment_1(), "rule__MyText__NameAssignment_1");
			builder.put(grammarAccess.getMyIntAccess().getIntAssignment_1(), "rule__MyInt__IntAssignment_1");
			builder.put(grammarAccess.getMyDecimalAccess().getDecAssignment_1(), "rule__MyDecimal__DecAssignment_1");
			builder.put(grammarAccess.getMyIdAccess().getIdAssignment_1(), "rule__MyId__IdAssignment_1");
			builder.put(grammarAccess.getMyTimeAccess().getTimeAssignment_1(), "rule__MyTime__TimeAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getRulesAssignment(), "rule__Rule__RulesAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ProjectionGrammarAccess grammarAccess;

	@Override
	protected InternalProjectionParser createParser() {
		InternalProjectionParser result = new InternalProjectionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_LINE_COMMENT", "RULE_LINE_COMMENT2", "RULE_ALERT_LINE_COMMENT", "RULE_QUESTION_LINE_COMMENT", "RULE_GOOD_LINE_COMMENT", "RULE_REGION_COMMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS" };
	}

	public ProjectionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProjectionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
