/*
 * generated by Xtext 2.15.0
 */
grammar InternalProjection;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.projection.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.projection.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.projection.services.ProjectionGrammarAccess;

}
@parser::members {
	private ProjectionGrammarAccess grammarAccess;

	public void setGrammarAccess(ProjectionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
		(rule__Model__ElementsAssignment)*
		{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyText
entryRuleMyText
:
{ before(grammarAccess.getMyTextRule()); }
	 ruleMyText
{ after(grammarAccess.getMyTextRule()); } 
	 EOF 
;

// Rule MyText
ruleMyText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyTextAccess().getGroup()); }
		(rule__MyText__Group__0)
		{ after(grammarAccess.getMyTextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyInt
entryRuleMyInt
:
{ before(grammarAccess.getMyIntRule()); }
	 ruleMyInt
{ after(grammarAccess.getMyIntRule()); } 
	 EOF 
;

// Rule MyInt
ruleMyInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyIntAccess().getGroup()); }
		(rule__MyInt__Group__0)
		{ after(grammarAccess.getMyIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyDecimal
entryRuleMyDecimal
:
{ before(grammarAccess.getMyDecimalRule()); }
	 ruleMyDecimal
{ after(grammarAccess.getMyDecimalRule()); } 
	 EOF 
;

// Rule MyDecimal
ruleMyDecimal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyDecimalAccess().getGroup()); }
		(rule__MyDecimal__Group__0)
		{ after(grammarAccess.getMyDecimalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyId
entryRuleMyId
:
{ before(grammarAccess.getMyIdRule()); }
	 ruleMyId
{ after(grammarAccess.getMyIdRule()); } 
	 EOF 
;

// Rule MyId
ruleMyId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyIdAccess().getGroup()); }
		(rule__MyId__Group__0)
		{ after(grammarAccess.getMyIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyTime
entryRuleMyTime
:
{ before(grammarAccess.getMyTimeRule()); }
	 ruleMyTime
{ after(grammarAccess.getMyTimeRule()); } 
	 EOF 
;

// Rule MyTime
ruleMyTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyTimeAccess().getGroup()); }
		(rule__MyTime__Group__0)
		{ after(grammarAccess.getMyTimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminal
entryRuleTerminal
:
{ before(grammarAccess.getTerminalRule()); }
	 ruleTerminal
{ after(grammarAccess.getTerminalRule()); } 
	 EOF 
;

// Rule Terminal
ruleTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalAccess().getAlternatives()); }
		(rule__Terminal__Alternatives)
		{ after(grammarAccess.getTerminalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getMyTextParserRuleCall_0()); }
		ruleMyText
		{ after(grammarAccess.getElementAccess().getMyTextParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMyIntParserRuleCall_1()); }
		ruleMyInt
		{ after(grammarAccess.getElementAccess().getMyIntParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMyDecimalParserRuleCall_2()); }
		ruleMyDecimal
		{ after(grammarAccess.getElementAccess().getMyDecimalParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMyIdParserRuleCall_3()); }
		ruleMyId
		{ after(grammarAccess.getElementAccess().getMyIdParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMyTimeParserRuleCall_4()); }
		ruleMyTime
		{ after(grammarAccess.getElementAccess().getMyTimeParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0()); }
		RULE_TIME
		{ after(grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1()); }
		RULE_CAMELCASE_IDENTIFIER
		{ after(grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyText__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyText__Group__0__Impl
	rule__MyText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyText__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyTextAccess().getHiKeyword_0()); }
	'Hi'
	{ after(grammarAccess.getMyTextAccess().getHiKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyText__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyText__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyText__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyTextAccess().getNameAssignment_1()); }
	(rule__MyText__NameAssignment_1)
	{ after(grammarAccess.getMyTextAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyInt__Group__0__Impl
	rule__MyInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyIntAccess().getIntegerKeyword_0()); }
	'Integer:'
	{ after(grammarAccess.getMyIntAccess().getIntegerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyIntAccess().getIntAssignment_1()); }
	(rule__MyInt__IntAssignment_1)
	{ after(grammarAccess.getMyIntAccess().getIntAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyDecimal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyDecimal__Group__0__Impl
	rule__MyDecimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyDecimal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyDecimalAccess().getDecimalKeyword_0()); }
	'Decimal:'
	{ after(grammarAccess.getMyDecimalAccess().getDecimalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyDecimal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyDecimal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyDecimal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyDecimalAccess().getDecAssignment_1()); }
	(rule__MyDecimal__DecAssignment_1)
	{ after(grammarAccess.getMyDecimalAccess().getDecAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyId__Group__0__Impl
	rule__MyId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyIdAccess().getIDKeyword_0()); }
	'ID:'
	{ after(grammarAccess.getMyIdAccess().getIDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyIdAccess().getIdAssignment_1()); }
	(rule__MyId__IdAssignment_1)
	{ after(grammarAccess.getMyIdAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyTime__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyTime__Group__0__Impl
	rule__MyTime__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTime__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyTimeAccess().getTimeKeyword_0()); }
	'Time:'
	{ after(grammarAccess.getMyTimeAccess().getTimeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTime__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyTime__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTime__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyTimeAccess().getTimeAssignment_1()); }
	(rule__MyTime__TimeAssignment_1)
	{ after(grammarAccess.getMyTimeAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
		ruleElement
		{ after(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyText__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyTextAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMyTextAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyInt__IntAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyIntAccess().getIntINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMyIntAccess().getIntINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyDecimal__DecAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyDecimalAccess().getDecDECIMALTerminalRuleCall_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getMyDecimalAccess().getDecDECIMALTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyId__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyIdAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMyIdAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTime__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyTimeAccess().getTimeTIMETerminalRuleCall_1_0()); }
		RULE_TIME
		{ after(grammarAccess.getMyTimeAccess().getTimeTIMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_LINE_COMMENT : '--' ~(('\r'|'\n'))*;

RULE_LINE_COMMENT2 : '//' ~(('!'|'?'|'='|'\r'|'\n'))? ~(('\r'|'\n'))*;

RULE_ALERT_LINE_COMMENT : '//!' ~(('\r'|'\n'))*;

RULE_QUESTION_LINE_COMMENT : '//?' ('\r'|'\n')*;

RULE_GOOD_LINE_COMMENT : '//=' ~(('\r'|'\n'))*;

RULE_REGION_COMMENT : '---' '-'+ ' ' (('A'..'Z'|'0'..'9')+ ' ')+ '-'+;

RULE_TIME : ('0'..'9')+ ':' ('0'..'9')+;

RULE_CAMELCASE_IDENTIFIER : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'$'|'#')*;

RULE_DECIMAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_CHARACTER : '\'' ~('\'') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;
