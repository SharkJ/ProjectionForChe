/*
 * generated by Xtext 2.15.0
 */
grammar InternalCustomTerminals;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.projection.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.projection.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.projection.services.CustomTerminalsGrammarAccess;

}
@parser::members {
	private CustomTerminalsGrammarAccess grammarAccess;

	public void setGrammarAccess(CustomTerminalsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getRulesAssignment()); }
		(rule__Rule__RulesAssignment)*
		{ after(grammarAccess.getRuleAccess().getRulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminal
entryRuleTerminal
:
{ before(grammarAccess.getTerminalRule()); }
	 ruleTerminal
{ after(grammarAccess.getTerminalRule()); } 
	 EOF 
;

// Rule Terminal
ruleTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalAccess().getAlternatives()); }
		(rule__Terminal__Alternatives)
		{ after(grammarAccess.getTerminalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0()); }
		RULE_TIME
		{ after(grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1()); }
		RULE_CAMELCASE_IDENTIFIER
		{ after(grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__RulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getRulesTerminalParserRuleCall_0()); }
		ruleTerminal
		{ after(grammarAccess.getRuleAccess().getRulesTerminalParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_LINE_COMMENT : '--' ~(('\r'|'\n'))*;

RULE_LINE_COMMENT2 : '//' ~(('!'|'?'|'='|'\r'|'\n'))? ~(('\r'|'\n'))*;

RULE_ALERT_LINE_COMMENT : '//!' ~(('\r'|'\n'))*;

RULE_QUESTION_LINE_COMMENT : '//?' ('\r'|'\n')*;

RULE_GOOD_LINE_COMMENT : '//=' ~(('\r'|'\n'))*;

RULE_REGION_COMMENT : '---' '-'+ ' ' (('A'..'Z'|'0'..'9')+ ' ')+ '-'+;

RULE_TIME : ('0'..'9')+ ':' ('0'..'9')+;

RULE_CAMELCASE_IDENTIFIER : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'$'|'#')*;

RULE_DECIMAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_CHARACTER : '\'' ~('\'') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;
