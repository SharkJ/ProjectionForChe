/**
 * generated by Xtext 2.15.0
 */
package org.xtext.projection.projection.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.projection.projection.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ProjectionFactoryImpl extends EFactoryImpl implements ProjectionFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ProjectionFactory init()
  {
    try
    {
      ProjectionFactory theProjectionFactory = (ProjectionFactory)EPackage.Registry.INSTANCE.getEFactory(ProjectionPackage.eNS_URI);
      if (theProjectionFactory != null)
      {
        return theProjectionFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ProjectionFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectionFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ProjectionPackage.MODEL: return createModel();
      case ProjectionPackage.ELEMENT: return createElement();
      case ProjectionPackage.MY_TEXT: return createMyText();
      case ProjectionPackage.MY_INT: return createMyInt();
      case ProjectionPackage.MY_DECIMAL: return createMyDecimal();
      case ProjectionPackage.MY_ID: return createMyId();
      case ProjectionPackage.MY_TIME: return createMyTime();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyText createMyText()
  {
    MyTextImpl myText = new MyTextImpl();
    return myText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyInt createMyInt()
  {
    MyIntImpl myInt = new MyIntImpl();
    return myInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDecimal createMyDecimal()
  {
    MyDecimalImpl myDecimal = new MyDecimalImpl();
    return myDecimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyId createMyId()
  {
    MyIdImpl myId = new MyIdImpl();
    return myId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyTime createMyTime()
  {
    MyTimeImpl myTime = new MyTimeImpl();
    return myTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectionPackage getProjectionPackage()
  {
    return (ProjectionPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ProjectionPackage getPackage()
  {
    return ProjectionPackage.eINSTANCE;
  }

} //ProjectionFactoryImpl
