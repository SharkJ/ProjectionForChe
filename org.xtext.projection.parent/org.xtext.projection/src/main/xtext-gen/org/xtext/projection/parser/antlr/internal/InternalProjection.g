/*
 * generated by Xtext 2.15.0
 */
grammar InternalProjection;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.projection.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.projection.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.projection.services.ProjectionGrammarAccess;

}

@parser::members {

 	private ProjectionGrammarAccess grammarAccess;

    public InternalProjectionParser(TokenStream input, ProjectionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ProjectionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.projection.Projection.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getMyTextParserRuleCall_0());
		}
		this_MyText_0=ruleMyText
		{
			$current = $this_MyText_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMyIntParserRuleCall_1());
		}
		this_MyInt_1=ruleMyInt
		{
			$current = $this_MyInt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMyDecimalParserRuleCall_2());
		}
		this_MyDecimal_2=ruleMyDecimal
		{
			$current = $this_MyDecimal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMyIdParserRuleCall_3());
		}
		this_MyId_3=ruleMyId
		{
			$current = $this_MyId_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMyTimeParserRuleCall_4());
		}
		this_MyTime_4=ruleMyTime
		{
			$current = $this_MyTime_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMyText
entryRuleMyText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyTextRule()); }
	iv_ruleMyText=ruleMyText
	{ $current=$iv_ruleMyText.current; }
	EOF;

// Rule MyText
ruleMyText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Hi'
		{
			newLeafNode(otherlv_0, grammarAccess.getMyTextAccess().getHiKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMyTextAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMyTextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMyInt
entryRuleMyInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyIntRule()); }
	iv_ruleMyInt=ruleMyInt
	{ $current=$iv_ruleMyInt.current; }
	EOF;

// Rule MyInt
ruleMyInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Integer:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMyIntAccess().getIntegerKeyword_0());
		}
		(
			(
				lv_int_1_0=RULE_INT
				{
					newLeafNode(lv_int_1_0, grammarAccess.getMyIntAccess().getIntINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMyIntRule());
					}
					setWithLastConsumed(
						$current,
						"int",
						lv_int_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMyDecimal
entryRuleMyDecimal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyDecimalRule()); }
	iv_ruleMyDecimal=ruleMyDecimal
	{ $current=$iv_ruleMyDecimal.current; }
	EOF;

// Rule MyDecimal
ruleMyDecimal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Decimal:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMyDecimalAccess().getDecimalKeyword_0());
		}
		(
			(
				lv_dec_1_0=RULE_DECIMAL
				{
					newLeafNode(lv_dec_1_0, grammarAccess.getMyDecimalAccess().getDecDECIMALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMyDecimalRule());
					}
					setWithLastConsumed(
						$current,
						"dec",
						lv_dec_1_0,
						"org.xtext.projection.CustomTerminals.DECIMAL");
				}
			)
		)
	)
;

// Entry rule entryRuleMyId
entryRuleMyId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyIdRule()); }
	iv_ruleMyId=ruleMyId
	{ $current=$iv_ruleMyId.current; }
	EOF;

// Rule MyId
ruleMyId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ID:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMyIdAccess().getIDKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getMyIdAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMyIdRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMyTime
entryRuleMyTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyTimeRule()); }
	iv_ruleMyTime=ruleMyTime
	{ $current=$iv_ruleMyTime.current; }
	EOF;

// Rule MyTime
ruleMyTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Time:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMyTimeAccess().getTimeKeyword_0());
		}
		(
			(
				lv_time_1_0=RULE_TIME
				{
					newLeafNode(lv_time_1_0, grammarAccess.getMyTimeAccess().getTimeTIMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMyTimeRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_1_0,
						"org.xtext.projection.CustomTerminals.TIME");
				}
			)
		)
	)
;

// Entry rule entryRuleTerminal
entryRuleTerminal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerminalRule()); }
	iv_ruleTerminal=ruleTerminal
	{ $current=$iv_ruleTerminal.current.getText(); }
	EOF;

// Rule Terminal
ruleTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TIME_0=RULE_TIME
		{
			$current.merge(this_TIME_0);
		}
		{
			newLeafNode(this_TIME_0, grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0());
		}
		    |
		this_CAMELCASE_IDENTIFIER_1=RULE_CAMELCASE_IDENTIFIER
		{
			$current.merge(this_CAMELCASE_IDENTIFIER_1);
		}
		{
			newLeafNode(this_CAMELCASE_IDENTIFIER_1, grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1());
		}
		    |
		this_DECIMAL_2=RULE_DECIMAL
		{
			$current.merge(this_DECIMAL_2);
		}
		{
			newLeafNode(this_DECIMAL_2, grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2());
		}
	)
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_LINE_COMMENT : '--' ~(('\r'|'\n'))*;

RULE_LINE_COMMENT2 : '//' ~(('!'|'?'|'='|'\r'|'\n'))? ~(('\r'|'\n'))*;

RULE_ALERT_LINE_COMMENT : '//!' ~(('\r'|'\n'))*;

RULE_QUESTION_LINE_COMMENT : '//?' ('\r'|'\n')*;

RULE_GOOD_LINE_COMMENT : '//=' ~(('\r'|'\n'))*;

RULE_REGION_COMMENT : '---' '-'+ ' ' (('A'..'Z'|'0'..'9')+ ' ')+ '-'+;

RULE_TIME : ('0'..'9')+ ':' ('0'..'9')+;

RULE_CAMELCASE_IDENTIFIER : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'$'|'#')*;

RULE_DECIMAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_CHARACTER : '\'' ~('\'') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;
