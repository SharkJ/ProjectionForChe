/*
 * generated by Xtext 2.15.0
 */
package org.xtext.projection.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.projection.customTerminals.CustomTerminalsPackage;
import org.xtext.projection.customTerminals.Rule;
import org.xtext.projection.projection.Model;
import org.xtext.projection.projection.MyDecimal;
import org.xtext.projection.projection.MyId;
import org.xtext.projection.projection.MyInt;
import org.xtext.projection.projection.MyText;
import org.xtext.projection.projection.MyTime;
import org.xtext.projection.projection.ProjectionPackage;
import org.xtext.projection.services.ProjectionGrammarAccess;

@SuppressWarnings("all")
public class ProjectionSemanticSequencer extends CustomTerminalsSemanticSequencer {

	@Inject
	private ProjectionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CustomTerminalsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CustomTerminalsPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			}
		else if (epackage == ProjectionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectionPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ProjectionPackage.MY_DECIMAL:
				sequence_MyDecimal(context, (MyDecimal) semanticObject); 
				return; 
			case ProjectionPackage.MY_ID:
				sequence_MyId(context, (MyId) semanticObject); 
				return; 
			case ProjectionPackage.MY_INT:
				sequence_MyInt(context, (MyInt) semanticObject); 
				return; 
			case ProjectionPackage.MY_TEXT:
				sequence_MyText(context, (MyText) semanticObject); 
				return; 
			case ProjectionPackage.MY_TIME:
				sequence_MyTime(context, (MyTime) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MyDecimal
	 *     MyDecimal returns MyDecimal
	 *
	 * Constraint:
	 *     dec=DECIMAL
	 */
	protected void sequence_MyDecimal(ISerializationContext context, MyDecimal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectionPackage.Literals.MY_DECIMAL__DEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectionPackage.Literals.MY_DECIMAL__DEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyDecimalAccess().getDecDECIMALTerminalRuleCall_1_0(), semanticObject.getDec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MyId
	 *     MyId returns MyId
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_MyId(ISerializationContext context, MyId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectionPackage.Literals.MY_ID__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectionPackage.Literals.MY_ID__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyIdAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MyInt
	 *     MyInt returns MyInt
	 *
	 * Constraint:
	 *     int=INT
	 */
	protected void sequence_MyInt(ISerializationContext context, MyInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectionPackage.Literals.MY_INT__INT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectionPackage.Literals.MY_INT__INT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyIntAccess().getIntINTTerminalRuleCall_1_0(), semanticObject.getInt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MyText
	 *     MyText returns MyText
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_MyText(ISerializationContext context, MyText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectionPackage.Literals.MY_TEXT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectionPackage.Literals.MY_TEXT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyTextAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MyTime
	 *     MyTime returns MyTime
	 *
	 * Constraint:
	 *     time=TIME
	 */
	protected void sequence_MyTime(ISerializationContext context, MyTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectionPackage.Literals.MY_TIME__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectionPackage.Literals.MY_TIME__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMyTimeAccess().getTimeTIMETerminalRuleCall_1_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
}
