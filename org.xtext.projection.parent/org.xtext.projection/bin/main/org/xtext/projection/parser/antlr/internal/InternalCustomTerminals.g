/*
 * generated by Xtext 2.15.0
 */
grammar InternalCustomTerminals;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.projection.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.projection.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.projection.services.CustomTerminalsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private CustomTerminalsGrammarAccess grammarAccess;

    public InternalCustomTerminalsParser(TokenStream input, CustomTerminalsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Rule";
   	}

   	@Override
   	protected CustomTerminalsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRuleAccess().getRulesTerminalParserRuleCall_0());
			}
			lv_rules_0_0=ruleTerminal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRuleRule());
				}
				add(
					$current,
					"rules",
					lv_rules_0_0,
					"org.xtext.projection.CustomTerminals.Terminal");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTerminal
entryRuleTerminal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerminalRule()); }
	iv_ruleTerminal=ruleTerminal
	{ $current=$iv_ruleTerminal.current.getText(); }
	EOF;

// Rule Terminal
ruleTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TIME_0=RULE_TIME
		{
			$current.merge(this_TIME_0);
		}
		{
			newLeafNode(this_TIME_0, grammarAccess.getTerminalAccess().getTIMETerminalRuleCall_0());
		}
		    |
		this_CAMELCASE_IDENTIFIER_1=RULE_CAMELCASE_IDENTIFIER
		{
			$current.merge(this_CAMELCASE_IDENTIFIER_1);
		}
		{
			newLeafNode(this_CAMELCASE_IDENTIFIER_1, grammarAccess.getTerminalAccess().getCAMELCASE_IDENTIFIERTerminalRuleCall_1());
		}
		    |
		this_DECIMAL_2=RULE_DECIMAL
		{
			$current.merge(this_DECIMAL_2);
		}
		{
			newLeafNode(this_DECIMAL_2, grammarAccess.getTerminalAccess().getDECIMALTerminalRuleCall_2());
		}
	)
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_LINE_COMMENT : '--' ~(('\r'|'\n'))*;

RULE_LINE_COMMENT2 : '//' ~(('!'|'?'|'='|'\r'|'\n'))? ~(('\r'|'\n'))*;

RULE_ALERT_LINE_COMMENT : '//!' ~(('\r'|'\n'))*;

RULE_QUESTION_LINE_COMMENT : '//?' ('\r'|'\n')*;

RULE_GOOD_LINE_COMMENT : '//=' ~(('\r'|'\n'))*;

RULE_REGION_COMMENT : '---' '-'+ ' ' (('A'..'Z'|'0'..'9')+ ' ')+ '-'+;

RULE_TIME : ('0'..'9')+ ':' ('0'..'9')+;

RULE_CAMELCASE_IDENTIFIER : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'$'|'#')*;

RULE_DECIMAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_CHARACTER : '\'' ~('\'') '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;
